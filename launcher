#!/usr/bin/env php
<?php
/* Author: Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software. It comes without any warranty, to the
 * extent permitted by applicable law. You can redistribute it and/or
 * modify it under the terms of the Do What The Fuck You Want To Public
 * License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

check_prereqs();
libxml_use_internal_errors(true);

if($argc >= 2 && in_array($argv[1], array('-h', '--help', 'help', '/h', '/help'))) {
    usage();
    die();
}

if(!file_exists('bin/ExeFile.exe')) {
    fatal('Not being run from EVE directory- cd to your EVE directory first then restart the script');
}

const LAUNCHER_INFO = 'http://client.eveonline.com/patches/win_launcherinfoTQ_inc.txt';

$c = curl_init();
//curl_setopt($c, CURLOPT_VERBOSE, true); /* Turn on when debugging */
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
curl_setopt($c, CURLOPT_ENCODING, 'gzip,deflate');
curl_setopt($c, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($c, CURLOPT_AUTOREFERER, true);
curl_setopt($c, CURLOPT_COOKIEJAR, $f = tempnam('/tmp', $argv[0].'_curlcookie'));
curl_setopt($c, CURLOPT_COOKIEFILE, $f);
curl_setopt($c, CURLOPT_HTTPHEADER, array('User-Agent', 'EVEOnlineLauncher/2.1.539169'));

curl_setopt($c, CURLOPT_URL, LAUNCHER_INFO);
$info = curl_exec($c);



/* Check client is up to date */

preg_match('%    BuildNumberInfoFile: (.+)%m', $info, $matches);
curl_setopt($c, CURLOPT_URL, trim($matches[1]));
$buildinfo = curl_exec($c);
preg_match('%BUILD:([1-9][0-9]*), %', $buildinfo, $matches);
$remote = $matches[1];
$local = file_exists('common.ini') ? (int)(parse_ini_file('common.ini')['build']) : '(unknown)';

echo "Remote has build ".$remote.", local has build ".$local."\n";
if(is_int($local) && $local < $remote) {
	echo "WARNING: your client is out of date.\n";
} else if(is_int($local) && $local > $remote) {
	echo "WARNING: your client has a newer build than remote.\n";
}



/* Start login sequence */

preg_match('%    LandingPage: (.+)$%m', $info, $matches);
$landingpageuri = url_relative_to_absolute(LAUNCHER_INFO, trim($matches[1]));

curl_setopt($c, CURLOPT_URL, $landingpageuri);
$launcherpage = new \DOMDocument();
$launcherpage->loadHTML(curl_exec($c));
$loginuri = url_relative_to_absolute($landingpageuri, $launcherpage->getElementByID('sso-frame')->getAttribute('src'));

curl_setopt($c, CURLOPT_URL, $loginuri);
$loginpage = new \DOMDocument();
$loginpage->loadHTML(curl_exec($c));
$actionuri = url_relative_to_absolute($loginuri, $loginpage->getElementsByTagName('form')->item(0)->getAttribute('action'));

curl_setopt($c, CURLOPT_URL, $actionuri);
$account = prompt('Account : ');
$passwd =  prompt('Password: ', true);
curl_setopt($c, CURLOPT_POST, true);
curl_setopt($c, CURLOPT_POSTFIELDS, http_build_query(array('UserName' => $account, 'Password' => $passwd)));
curl_setopt($c, CURLOPT_FOLLOWLOCATION, false);
curl_setopt($c, CURLOPT_HEADER, true);
$auth = curl_exec($c);
unset($passwd); /* No funny business */

if(!preg_match('%^Location: (.+)\r$%m', $auth, $matches)) {
    fatal('got no Location redirect, incorrect credentials?');
}
$authuri = url_relative_to_absolute($actionuri, $matches[1]);

curl_setopt($c, CURLOPT_URL, $authuri);
curl_setopt($c, CURLOPT_POST, false);
$authresult = curl_exec($c);

if(preg_match('%<title>License Agreement Update</title>%', $authresult)) {
    /* Have to accept the EULA */
    $eula = new \DOMDocument();
    $eula->loadHTML($authresult);

    $accept = prompt('Do you accept the EULA [y/N]? ');
    if(!in_array(strtolower($accept), array('y', 'yes'))) {
        /* There is no hope */
        die(41);
    }

    $post = array();
    foreach($eula->getElementsByTagName('input') as $input) {
        if($input->getAttribute('id') === 'decline') continue; /* Don't decline the EULA, duh */

        $post[$input->getAttribute('name')] = $input->getAttribute('value');
    }

    $actionuri = url_relative_to_absolute($authuri, $eula->getElementsByTagName('form')->item(0)->getAttribute('action'));

    curl_setopt($c, CURLOPT_URL, $actionuri);
    curl_setopt($c, CURLOPT_POST, true);
    curl_setopt($c, CURLOPT_POSTFIELDS, http_build_query($post));
    $authresult = curl_exec($c);

    curl_setopt($c, CURLOPT_POST, false);
}

if(!preg_match('%^Location: (.+)\r$%m', $authresult, $matches)) {
    echo $authresult;
    fatal('got no Location redirect (round 2), something is wrong!');
}
$finaluri = url_relative_to_absolute($authuri, $matches[1]);

curl_setopt($c, CURLOPT_URL, $finaluri);
$final = curl_exec($c);

if(!preg_match('%#access_token=([^&]+)%', $finaluri, $matches)) {
    echo $finaluri;
    echo $final;
    fatal('got no access token, something is wrong!');
}

$token = $matches[1];
info('got token '.$token);

curl_setopt($c, CURLOPT_URL, url_relative_to_absolute($finaluri, '/launcher/token?accesstoken='.$token));
$finaltoken = curl_exec($c);

if(!preg_match('%#access_token=([^&]+)%', $finaltoken, $matches)) {
    fatal('got no client access token, something is wrong!');
}
$finaltoken = $matches[1];
info('got final token '.$finaltoken);

$wineargs = array();
$clientargs = array();

for($i = 1; $i < $argc; ++$i) {
    if(substr($argv[$i], 0, 4) == '-Ww,') {
        $wineargs[] = substr($argv[$i], 4);
    } else {
        $clientargs[] = $argv[$i];
    }
}

$command = escapeshellcmd('wine');

foreach($wineargs as $arg) {
    $command .= ' '.escapeshellarg($arg);
}

$command .= ' '.escapeshellarg('bin/ExeFile.exe');
$command .= ' '.escapeshellarg('/ssoToken='.$finaltoken);

foreach($clientargs as $arg) {
    $command .= ' '.escapeshellarg($arg);
}

info("launching client using command: ".$command);
passthru($command);

curl_close($c);
die();

/* --------------------- */

function info($mesg) {
    fprintf(STDERR, "INFO: ".$mesg."\n");
}

function fatal($mesg) {
    fprintf(STDERR, "FATAL: ".$mesg."\n");
    die(42);
}

function check_prereqs() {
    function_exists('curl_init') or fatal("curl extension is required");
}

function url_relative_to_absolute($current, $relative) {
    list($current, ) = explode('?', $current, 2);
    $relativequery = explode('?', $relative, 2);
    list($relative, $relativeQ) = (count($relativequery) === 2) ? $relativequery : array($relative, '');

    $cparts = explode('/', $current);
    $rparts = explode('/', $relative);

    if(preg_match('%^https?:$%', $rparts[0])) {
        /* "Relative" URI is actually absolute */
        $final = implode('/', $rparts);
    } else if($rparts[0] === '') {
        /* Relative of type /foo/bar */
        $final = implode('/', array_merge(
            array_slice($cparts, 0, 3), /* Protocol + domain name */
            array_slice($rparts, 1) /* Full relative URI without leading / */
        ));
    } else {
        /* Relative of type foo/bar or ./foo/bar, etc */
        $final = implode('/', array_merge(
            array_slice($cparts, 0, -1), /* Full URI without the last filename component */
            $rparts
        ));
    }

    return $final.'?'.$relativeQ;
}

function prompt($prompt, $hide = false) {
    echo $prompt;
    if($hide) shell_exec('stty -echo');
    $input = fgets(STDIN);
    if($hide) {
        shell_exec('stty echo');
        echo "\n";
    }

    return substr($input, 0, -1); /* Trim the final \n */
}

function usage() {
    echo "Usage:\n"
    ."\tlauncher [-Ww,wine-option...] [eve-options...]\n\n"
    ."Example:\n"
    ."\tlauncher -Ww,explorer -Ww,/desktop=foo,1920x1080 /nosplash /noconsole /server:Tranquility\n";
}
